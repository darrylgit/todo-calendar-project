{"version":3,"sources":["components/Calendar/Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Calendar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nextMonth","setState","currentMonth","dateFns","addMonths","state","prevMonth","subMonths","dateDoubleClickHandler","date","objectSpread","selectedDate","modalVisible","inputChangeHandler","key","value","formInputs","inputFieldSelectedHandler","event","id","inputFieldSelectedId","inputFieldError","formSubmittedHandler","preventDefault","undefined","title","target","reset","submissions","concat","clearAllFormFields","document","getElementById","dateSubmissionItemSelectedHandler","type","selectedSubmissionByDate","interactiveModal","actionButtonSelectedHandler","action","splice","Promise","resolve","then","Date","today","react_default","a","createElement","className","onClick","format","days","startDate","startOfWeek","i","push","addDays","_this2","_this$state","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","day","formattedDate","_loop","cloneDay","isSameMonth","isSameDay","onDoubleClick","parse","style","position","top","left","bottom","right","padding","length","overflow","display","height","width","backgroundColor","color","_this3","renderHeader","renderDays","renderCells","fontSize","autocomplete","onSubmit","borderRadius","paddingHorizontal","paddingBottom","maxlength","placeholder","name","onChange","borderColor","paddingTop","htmlFor","marginRight","class","todo","flexDirection","alignItems","map","item","index","textAlign","Component","App","components_Calendar_Calendar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fef71a16.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport dateFns from \"date-fns\";\nimport \"./calendar.css\";\n\nclass Calendar extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      currentMonth: new Date(),\n      today: new Date(),\n      modalVisible:\"\",\n      formInputs:{},\n      submissions:{}\n    };\n  }\n  renderHeader() {\n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\">\n          <div className=\"icon\" onClick={this.prevMonth}>\n            chevron_left\n          </div>\n        </div>\n        <div className=\"col col-center\">\n          <span>{dateFns.format(this.state.currentMonth, \"MMMM YYYY\")}</span>\n        </div>\n        <div className=\"col col-end\" onClick={this.nextMonth}>\n          <div className=\"icon\">chevron_right</div>\n        </div>\n      </div>\n    );\n  }\n\n  renderDays() {\n\n    let days = [];\n    let startDate = dateFns.startOfWeek(this.state.currentMonth);\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {dateFns.format(dateFns.addDays(startDate, i), \"dddd\")}\n        </div>\n      );\n    }\n\n    return <div className=\"days row\">{days}</div>;\n  }\n\n  renderCells() {\n    const { today, currentMonth } = this.state;\n    const monthStart = dateFns.startOfMonth(currentMonth);\n    const monthEnd = dateFns.endOfMonth(monthStart);\n    const startDate = dateFns.startOfWeek(monthStart);\n    const endDate = dateFns.endOfWeek(monthEnd);\n\n    let rows = [];\n\n    let days = [];\n    let day = startDate;\n    let formattedDate = \"\";\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        formattedDate = dateFns.format(day, \"D\");\n        const cloneDay = day;\n        days.push(\n            <div\n              className={`col cell ${\n                !dateFns.isSameMonth(day, monthStart)\n                  ? \"disabled\"\n                  : dateFns.isSameDay(day, today) ? \"selected\" : \"\"\n              }`}\n              key={day}\n              onDoubleClick = {() => this.dateDoubleClickHandler(dateFns.parse(cloneDay))}\n            >\n            \n              <span className=\"number\">{formattedDate}</span>\n              <span className=\"bg\">{formattedDate}</span>\n              <span style={{position:\"absolute\", top:0, left:0, bottom:0, right:0, padding:15}}>\n              {\n                this.state.submissions[day] !== undefined &&\n                this.state.submissions[day].length !== 0 ?\n                this.state.submissions[day].length !== 1 ?\n                  <div>\n                    <span style={{overflow:\"hidden\", display:\"block\", height:20, width:\"100%\", padding:2}}>\n                      <button className=\"button\" onClick={() => this.dateSubmissionItemSelectedHandler(\"single\", dateFns.parse(cloneDay), 0)} \n                      style={{overflow:\"hidden\", backgroundColor:\"rgba(0,0,0,.25)\", height:\"100%\"}}>\n                          <span style={{display:\"block\", color:\"#333333\"}}>{this.state.submissions[day][0].title}</span>\n                      </button>\n                    </span>\n                    <span style={{overflow:\"hidden\", display:\"block\", height:20, width:\"100%\", padding:2}}>\n                      <button className=\"button\" onClick={() => this.dateSubmissionItemSelectedHandler(\"group\", dateFns.parse(cloneDay), 0)} \n                      style={{overflow:\"hidden\", backgroundColor:\"rgba(0,0,0,.25)\", height:\"100%\"}}>\n                          <span style={{display:\"block\", color:\"#333333\"}}>+ {this.state.submissions[day].length-1} more</span>\n                      </button>\n                    </span> \n                  </div>\n                  :\n                  <span style={{overflow:\"hidden\", display:\"block\", height:20, width:\"100%\", padding:2}}>\n                    <button className=\"button\" onClick={() => this.dateSubmissionItemSelectedHandler(\"single\", dateFns.parse(cloneDay), 0)} \n                    style={{overflow:\"hidden\", backgroundColor:\"rgba(0,0,0,.25)\", height:\"100%\"}}>\n                        <span style={{display:\"block\", color:\"#333333\"}}>{this.state.submissions[day][0].title}</span>\n                    </button>\n                  </span>\n                  : null\n              }\n              </span>\n            </div> \n            \n        );\n        day = dateFns.addDays(day, 1);\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      );\n      days = [];\n    }\n    return <div className=\"body\">{rows}</div>;\n  }\n\n  nextMonth = () => {\n    this.setState({\n      currentMonth: dateFns.addMonths(this.state.currentMonth, 1)\n    });\n  };\n\n  prevMonth = () => {\n    this.setState({\n      currentMonth: dateFns.subMonths(this.state.currentMonth, 1)\n    });\n  };\n  \n  dateDoubleClickHandler = date => {\n    this.setState({\n      ...this.state,\n      selectedDate:date,\n      modalVisible:\"modalId1\"\n    })\n  };\n\n  inputChangeHandler = (key, value) => {\n    let formInputs = this.state.formInputs\n    formInputs[key] = value\n    this.setState({\n      ...this.state,\n      formInputs:formInputs\n    })\n  };\n\n  inputFieldSelectedHandler = (event, id) => {\n    // we use this method to set the id of the selected input field. \n    // we also use this method to remove all field errors when the\n    // user selects any input field following a failed validation.\n\n    this.setState({\n      ...this.state,\n      inputFieldSelectedId:id,\n      inputFieldError:\"\"\n    })\n  };\n\n  formSubmittedHandler = event => {\n    event.preventDefault()\n\n    if(this.state.formInputs.title !== undefined &&\n    this.state.formInputs.title !== \"\" ){\n      //reset input values if pass validation\n      event.target.reset()\n      let submissions = this.state.submissions\n      if(submissions[this.state.selectedDate] !== undefined){\n        submissions[this.state.selectedDate] = submissions[this.state.selectedDate]\n            .concat(this.state.formInputs)\n        this.setState({\n          ...this.state,\n          submissions:submissions\n        }, () => this.setState({\n          ...this.state,\n          inputFieldSelectedId:\"\",\n          formInputs:{},\n          modalVisible:\"\"}))\n      }else{\n        submissions[this.state.selectedDate] = [this.state.formInputs]\n        this.setState({\n          ...this.state,\n          submissions:submissions\n        }, () => this.setState({\n          ...this.state,\n          inputFieldSelectedId:\"\",\n          formInputs:{},\n          modalVisible:\"\"}))\n      }\n    }else{\n      this.setState({\n        ...this.state,\n        inputFieldSelectedId:\"\",\n        inputFieldError:\"inputId1\"\n      })\n    }\n  };\n\n  clearAllFormFields = () => {\n    document.getElementById(\"formId1\").reset()\n    this.setState({\n      ...this.state,\n      inputFieldSelectedId:\"\",\n      inputFieldError:\"\",\n      formInputs:{}\n    })\n  };\n  \n  dateSubmissionItemSelectedHandler = (type, date, id) => {\n\n    this.setState({\n      ...this.state,\n      selectedDate:date,\n      selectedSubmissionByDate:id\n    }, () => {\n      let interactiveModal = this.state.interactiveModal\n      let modalVisible = this.state.modalVisible\n      if(type ===\"single\"){\n        if(modalVisible===\"modalId3\"){\n           /*=======================================================\n            --------------------------------------------------------\n            IMPORTANT \n            --------------------------------------------------------\n            modalVisible becomes modalId2, but we still need to show \n            modalId3 in the background. We use interactiveModal as a \n            dependency for modalId3 visibility when modalVisibility \n            is set to modalId2. We also use interactiveModal to signal\n            when to animate/offset the desired modal relative to the \n            background modal.\n            ========================================================*/\n            interactiveModal = \"modalId2\"\n        }\n        //detail modal\n        modalVisible = \"modalId2\"\n      }else{\n        //list modal\n        modalVisible = \"modalId3\"\n      }\n      \n      interactiveModal = interactiveModal !== undefined && \n      interactiveModal !== \"\" ? interactiveModal : \"\"\n      this.setState({\n        ...this.state,\n        interactiveModal:interactiveModal,\n        modalVisible:modalVisible\n      })\n    })\n  };\n  /*--------------------------------------\n  ::modalId1: form modal\n  ::modalId2: detail modal\n  ::modalId3: list modal\n  ---------------------------------------*/\n  actionButtonSelectedHandler = action => {\n\n    let modalVisible = this.state.modalVisible\n    let interactiveModal = this.state.interactiveModal\n\n    if(action ===\"delete\"){\n      let submissions = this.state.submissions\n\n      if(modalVisible === \"modalId2\" ){\n        submissions[this.state.selectedDate].splice(this.state.selectedSubmissionByDate,1)\n        this.setState({\n          ...this.state,\n          submissions:submissions\n        }, () => {\n          interactiveModal === \"modalId2\" ? \n            this.setState({modalVisible:\"modalId3\"})\n          :this.setState({modalVisible:\"\"})\n        })\n      } \n    }\n\n    if(action === \"close\"){\n      modalVisible === \"modalId1\" ?\n      Promise.resolve(this.clearAllFormFields())\n      .then(() => this.setState({...this.state, modalVisible:\"\"}))\n      :\n      modalVisible === \"modalId3\" ? \n      this.setState({...this.state, interactiveModal:\"\", modalVisible:\"\"})\n      :\n\n      /*=============================================================\n      this is most likely the foreground modal. modals that interact\n      with one another ie modalId2 and modalId3 in this case, the \n      dependency for visibility of the background modal exists only \n      when `interactiveModal` state is set to its corresponding \n      foreground modal. Otherwise any modal is visible when the\n      `modalVisible` state is set to the modal's id. \n\n      When removing a modal, we check if its id is set in the `modalVisible`\n      state. Setting the visibility state to an id other than the current\n      modal will remove it. This is ideal here also, because the background\n      modal being set as the current modal will be represented in the state\n      which we use to determine which modal to remove when handling the close \n      modal process in this method.\n      ==============================================================*/\n      modalVisible === \"modalId2\" ? \n        interactiveModal === \"modalId2\" ? \n          this.setState({modalVisible:\"modalId3\"})\n        :this.setState({modalVisible:\"\"})\n      :this.setState({modalVisible:\"\"})\n      }\n\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"calendar\">\n          {this.renderHeader()}\n          {this.renderDays()}\n          {this.renderCells()}\n        </div>\n        <span className=\"modal-container\" style={{display:this.state.modalVisible === \"modalId1\" ? \"flex\" : \"none\"}}>\n          <span className=\"modal\">\n            <span className=\"icon action\" onClick={() => this.actionButtonSelectedHandler(\"close\")}\n            style={{position:\"absolute\", top:15, right:10, fontSize:22}}>\n              clear\n            </span>\n            <form id=\"formId1\" autocomplete=\"off\" onSubmit={event => this.formSubmittedHandler(event)} style={{width:\"100%\", height:\"100%\", borderRadius:10, \n            paddingHorizontal:20}}>\n              <div style={{paddingBottom:30, width:\"100%\", height:\"100%\", borderRadius:10}}>\n                <input maxlength=\"60\" type=\"text\" placeholder=\"Add title\" className={`input ${this.state.inputFieldError !==undefined && \n                  this.state.inputFieldError === \"inputId1\" && \"error\"}`} \n                  onClick={event => this.inputFieldSelectedHandler(event, \"inputId1\")}\n                  name=\"title\" onChange={event => this.inputChangeHandler(event.target.name, event.target.value)}\n                  style={{borderColor:this.state.inputFieldSelectedId !== undefined && \n                  this.state.inputFieldSelectedId=== \"inputId1\" && \"blue\"}}/>\n\n                <span style={{display:\"block\", width:\"100%\", height:\"100%\", paddingTop:10}}>\n                  <label style={{width:\"100%\", height:20}} htmlFor=\"inputId2\">Todo</label>\n                  <span style={{display:\"block\", width:\"100%\", height:70}}>\n                    <textarea id=\"inputId2\" className=\"textarea\" name=\"todo\" \n                    onClick={event => this.inputFieldSelectedHandler(event, \"inputId2\")}\n                    onChange={event => this.inputChangeHandler(event.target.name, event.target.value)}/>\n                  </span>\n                </span>\n              </div>\n              <button className=\"submit-button\"><span>Save</span></button>\n            </form>\n          </span>\n        </span>\n\n        <span className=\"modal-container\" style={{display:this.state.modalVisible === \"modalId2\" ? \"flex\" : \"none\"}}>\n          <span className={this.state.interactiveModal !== undefined \n            && this.state.interactiveModal ===\"modalId2\" ? \"-modal -interactive\":\"modal\"}>\n            <span style={{position:\"absolute\", top:15, right:10}}>\n              <span className=\"icon action\" onClick={() => this.actionButtonSelectedHandler(\"delete\")}\n              style={{fontSize:20, marginRight:5}}>\n                delete_outline\n              </span>\n              <span className=\"icon action\" onClick={() => this.actionButtonSelectedHandler(\"close\")}\n              style={{fontSize:22}}>\n                clear\n              </span>\n            </span>\n            \n            <div style={{width:\"100%\", height:\"100%\", borderRadius:10, paddingHorizontal:20}}>\n              <div style={{width:\"100%\", height:\"100%\", borderRadius:10}}>\n                <h3>{this.state.selectedSubmissionByDate !== undefined &&\n                  this.state.submissions[this.state.selectedDate] !== undefined &&\n                  this.state.submissions[this.state.selectedDate][this.state.selectedSubmissionByDate] !== undefined &&\n                  this.state.submissions[this.state.selectedDate][this.state.selectedSubmissionByDate].title}</h3>\n                  <span class=\"-scrollY -sm\">\n                  <p class=\"-sm\">{this.state.selectedSubmissionByDate !== undefined &&\n                  this.state.submissions[this.state.selectedDate] !== undefined &&\n                  this.state.submissions[this.state.selectedDate][this.state.selectedSubmissionByDate] !== undefined &&\n                  this.state.submissions[this.state.selectedDate][this.state.selectedSubmissionByDate].todo}</p>\n                  </span>\n              </div>\n            </div>\n          </span>\n        </span>\n\n        <span className=\"modal-container\" style={{display:this.state.modalVisible === \"modalId3\" || \n        this.state.interactiveModal !== undefined && this.state.interactiveModal ===\"modalId2\" ? \"flex\" : \"none\"}}>\n          <span class=\"-modal -flexable\">\n            <span style={{position:\"absolute\", top:15, right:10}}>\n              <span className=\"icon action\" onClick={() => this.actionButtonSelectedHandler(\"close\")}\n              style={{fontSize:22}}>\n                clear\n              </span>\n            </span>\n            <div style={{display:\"flex\", flexDirection:\"column\", alignItems:\"center\", \n            borderRadius:10, paddingHorizontal:20}}>\n            {\n              this.state.submissions[this.state.selectedDate] !== undefined \n              && this.state.submissions[this.state.selectedDate].length !== 0 ?\n                this.state.submissions[this.state.selectedDate].map((item, index) => \n                  <span key={index} style={{display:\"block\", height:24, width:160, padding:2}}>\n                    <span style={{overflow:\"hidden\", display:\"block\", height:\"100%\", width:\"100%\"}}>\n                      <button className=\"button\" \n                      onClick={() => this.dateSubmissionItemSelectedHandler(\"single\", this.state.selectedDate, index)} \n                      style={{overflow:\"hidden\", backgroundColor:\"rgba(0,0,0,.25)\", height:\"100%\"}}>\n                          <span style={{display:\"block\", color:\"#333333\"}}>{item.title}</span>\n                      </button>\n                    </span>\n                  </span>\n                )\n              :\n                <span style={{textAlign:\"center\", display:\"block\", height:\"100%\", width:\"100%\"}}>\n                  <p class=\"-sm\">There are no todos on this date</p>\n                </span>\n            }\n            </div>\n          </span>\n        </span>\n\n      </div>\n    );\n  }\n}\n\nexport default Calendar;","import React, { Component } from 'react';\n\nimport Calendar from \"./components/Calendar/Calendar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div id=\"logo\">\n            <span className=\"icon\">date_range</span>\n            <span >\n              todo<b>calendar</b>\n            </span>\n          </div>\n        </header>\n        <main>\n          <Calendar />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}